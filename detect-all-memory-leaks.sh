#!/bin/bash

# Script de d√©tection des fuites m√©moire pour tous les tests
# Ex√©cute les tests un par un avec isolation et surveille la consommation m√©moire

# Couleurs pour une meilleure lisibilit√©
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration
THRESHOLD_MB=10        # Seuil d'alerte en MB
REPEAT_COUNT=2         # Nombre d'ex√©cutions pour chaque test
REPORT_FILE="memory-leak-report.txt"

echo -e "${BLUE}üîç D√©tection des fuites m√©moire dans TOUS les tests${NC}"
echo -e "${YELLOW}Note: Cette op√©ration peut prendre du temps car chaque test est ex√©cut√© isol√©ment ${REPEAT_COUNT} fois${NC}\n"
echo -e "${YELLOW}Seuil d'alerte: ${THRESHOLD_MB} MB${NC}"
echo -e "${YELLOW}R√©sultats seront enregistr√©s dans: ${REPORT_FILE}${NC}\n"

# Trouver tous les fichiers de test
echo -e "${BLUE}Recherche des fichiers de test...${NC}"
TEST_FILES=$(find src tests -name "*.spec.ts")

# V√©rifier qu'on a trouv√© des fichiers
if [ -z "$TEST_FILES" ]; then
  echo -e "${RED}Aucun fichier de test trouv√©!${NC}"
  exit 1
fi

# Compter les fichiers
FILE_COUNT=$(echo "$TEST_FILES" | wc -l)
echo -e "${GREEN}$FILE_COUNT fichiers de test trouv√©s.${NC}\n"

# Pr√©parer le rapport
echo "Rapport de d√©tection des fuites m√©moire - $(date)" > "$REPORT_FILE"
echo "Seuil d'alerte: $THRESHOLD_MB MB" >> "$REPORT_FILE"
echo "Nombre de tests: $FILE_COUNT" >> "$REPORT_FILE"
echo "---------------------------------------------" >> "$REPORT_FILE"

# Compteurs
LEAKING_COUNT=0
ERROR_COUNT=0

# Tester chaque fichier
for TEST_FILE in $TEST_FILES; do
  echo -e "${BLUE}Test: $TEST_FILE${NC}"
  echo "Test: $TEST_FILE" >> "$REPORT_FILE"
  
  # Variables pour suivre la m√©moire
  TOTAL_DIFF=0
  MAX_DIFF=0
  ERROR_DETECTED=false
  
  # Ex√©cuter le test plusieurs fois
  for i in $(seq 1 $REPEAT_COUNT); do
    echo -e "${YELLOW}  It√©ration $i/$REPEAT_COUNT${NC}"
    
    # Mesure de m√©moire avant
    MEM_BEFORE=$(ps -o rss= -p $$ | awk '{print $1/1024}')
    echo "  M√©moire avant: ${MEM_BEFORE} MB"
    
    # Ex√©cuter le test avec isolation
    if npx vitest run "$TEST_FILE" --isolate --silent > /dev/null 2>&1; then
      TEST_STATUS="OK"
    else
      TEST_STATUS="√âCHEC"
      ERROR_DETECTED=true
    fi
    
    # Mesure de m√©moire apr√®s
    MEM_AFTER=$(ps -o rss= -p $$ | awk '{print $1/1024}')
    echo "  M√©moire apr√®s: ${MEM_AFTER} MB"
    
    # Calculer la diff√©rence
    DIFF=$(echo "$MEM_AFTER - $MEM_BEFORE" | bc)
    TOTAL_DIFF=$(echo "$TOTAL_DIFF + $DIFF" | bc)
    
    # Mettre √† jour le max si n√©cessaire
    if (( $(echo "$DIFF > $MAX_DIFF" | bc -l) )); then
      MAX_DIFF=$DIFF
    fi
    
    echo "  Œî M√©moire: ${DIFF} MB (Status: $TEST_STATUS)"
    echo ""
    
    # Attendre un peu pour stabiliser
    sleep 1
  done
  
  # Calculer la moyenne
  AVG_DIFF=$(echo "scale=2; $TOTAL_DIFF / $REPEAT_COUNT" | bc)
  
  # V√©rifier s'il y a une fuite
  if (( $(echo "$MAX_DIFF > $THRESHOLD_MB" | bc -l) )); then
    echo -e "${RED}‚ö†Ô∏è FUITE D√âTECT√âE: $TEST_FILE - Max: ${MAX_DIFF} MB, Moy: ${AVG_DIFF} MB${NC}"
    echo "‚ö†Ô∏è FUITE D√âTECT√âE - Max: ${MAX_DIFF} MB, Moy: ${AVG_DIFF} MB" >> "$REPORT_FILE"
    LEAKING_COUNT=$((LEAKING_COUNT + 1))
  elif [ "$ERROR_DETECTED" = true ]; then
    echo -e "${YELLOW}‚ö†Ô∏è ERREUR: $TEST_FILE - Le test a √©chou√©${NC}"
    echo "‚ö†Ô∏è ERREUR - Le test a √©chou√©" >> "$REPORT_FILE"
    ERROR_COUNT=$((ERROR_COUNT + 1))
  else
    echo -e "${GREEN}‚úì OK: $TEST_FILE - Max: ${MAX_DIFF} MB, Moy: ${AVG_DIFF} MB${NC}"
    echo "‚úì OK - Max: ${MAX_DIFF} MB, Moy: ${AVG_DIFF} MB" >> "$REPORT_FILE"
  fi
  
  echo "---------------------------------------------" >> "$REPORT_FILE"
  echo "" # Ligne vide pour s√©parer les r√©sultats
done

# R√©sum√© final
echo -e "\n${BLUE}üìä R√âSUM√â DES R√âSULTATS${NC}"
echo -e "${BLUE}üìä $FILE_COUNT tests analys√©s${NC}"
echo -e "${RED}‚ö†Ô∏è $LEAKING_COUNT tests avec des fuites m√©moire${NC}"
echo -e "${YELLOW}‚ö†Ô∏è $ERROR_COUNT tests avec des erreurs${NC}"

# Ajouter le r√©sum√© au rapport
echo "" >> "$REPORT_FILE"
echo "R√âSUM√â DES R√âSULTATS" >> "$REPORT_FILE"
echo "$FILE_COUNT tests analys√©s" >> "$REPORT_FILE"
echo "$LEAKING_COUNT tests avec des fuites m√©moire" >> "$REPORT_FILE"
echo "$ERROR_COUNT tests avec des erreurs" >> "$REPORT_FILE"

echo -e "\n${GREEN}Rapport enregistr√© dans $REPORT_FILE${NC}"
